{"Name":"Google Cast","Id":719,"Alias":"googlecastios","Description":"Google Cast is a technology that enables multi-screen experiences and lets a user send and control content like video from a small computing device like a phone, tablet, or laptop to a large display device like a television.\n\nThe sender may be a phone or tablet running on Android or iOS, or it may be a laptop computer running Chrome OS, Mac OS, or Windows. A sender application running on the sender device uses the Google Cast API appropriate to its operating system to discover and transmit to the receiver application running on the receiver device. You can use the sender APIs to enable your Android, iOS, or Chrome app to send content to a large display.\n\nThe receiver device is optimized for video playback with a receiver application that receives data over Internet Protocol and transmits it to the television. The receiver API lets you customize the messaging between the sender and receiver applications for authentication and other scenarios.\n\n\n\nWhile content is playing on a TV, a user can multitask on their device without interrupting the video playback. For example, a user can search for a video on their phoneâ€™s YouTube application and then send the video to their TV via a Google Cast device. The user can play, pause, seek, and control volume using their phone, they can search for other videos to watch, and even check their email while the content keeps playing on the TV.\n\n#####Portions of this page are modifications based on [work](https://developers.google.com/cast/) created and shared by [Google Inc.](http://google.com) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/).","Version":"2.1.0","Summary":"Casting your content to the Big Screen using your iOS device.","QuickStart":"The Google Cast SDK uses the delegation pattern to inform the application of events and to move between various states of the Cast app life cycle.\n\n### Application flow\n\nThe following sections cover the details of the typical execution flow for a sender application:\n\n* Scan for devices\n* Select device\n* Launch application\n* Work with media channels\n* Load the media\n\n### Scan for devices\n\nIn this step, the sender application searches the WiFi network for Google Cast receiver devices. This involves instantiating a device scanner, a delegate, and starting the scan. As the scanner discovers devices, it notifies the application via the delegate.\n\nA Google Cast receiver device is represented by a `GCKDevice` class, which contains attributes like the device\u0027s IP address, friendly display name, model and manufacturer, and a URL to the device\u0027s display icon.\n\nTypically, an application will run a scan for a fixed amount of time (for example, 5 seconds), and display a list of discovered devices to the user. The user will then select the device they wish to interact with from this list.\n\nTo scan for cast enabled devices you must define a device scanner and register the delegate, then start scanning.\n\n**Device scanner**\n\n```csharp\nusing GoogleCast;\n//...\n\t\nvoid StartScanning ()\n{\n\t// Initialize the device scanner\n\tDeviceScanner = new GCKDeviceScanner ();\n\t// DeviceScannerListener class implements the interface `IGCKDeviceScannerListener`\n\tDeviceScanner.AddListener (new DeviceScannerListener ());\n\t// Start scanning for deviced\n\tDeviceScanner.StartScan ();\n}\n```\n\n\nAfter scanning begins, your delegate will be notified when devices are discovered or go offline.\n\n**Device scanner listener**\n\n\n```csharp\nusing GoogleCast;\n//...\n\npublic class DeviceScannerListener : NSObject, IGCKDeviceScannerListener\n{\n\t[Export (\"deviceDidComeOnline:\")]\n\tpublic void DeviceDidComeOnline (GCKDevice device)\n\t{\n\t\tConsole.WriteLine (\"Device found: {0}\", device.FriendlyName);\n\t}\n\n\t[Export (\"deviceDidGoOffline:\")]\n\tpublic void DeviceDidGoOffline (GoogleCast.GCKDevice device)\n\t{\n\t\tConsole.WriteLine (\"Device disappeared: {0}\", device.FriendlyName);\n\t}\n}\n```\n\nFor convenience the device scanner keeps track of all known active devices. This can be used to create an UIActionSheet for deploying devices to the user.\n\n**Device selection**\n\nOnce the user has selected a device you can connect to it. Start by creating a device manager and give it the selected device. Next you register a delegate to listen for the connection. Finally you connect to the device.\n\n```csharp\nusing GoogleCast;\n//...\n\nvoid ConnectToDevice () \n{\n\t// selectedDevice comes from the user selection and its type is GCKDevice\n\tvar info = NSBundle.MainBundle.InfoDictionary;\n\tvar deviceManager = new GCKDeviceManager (selectedDevice, info [\"CFBundleIdentifier\"].ToString ());\n\t// DeviceManagerDelegate class implements the interface `IGCKDeviceManagerDelegate`\n\tdeviceManager.Delegate = new DeviceManagerDelegate ();\n\tdeviceManager.Connect ();\n}\n```\n\n**Launch application**\n\nOnce you are connected to the receiver you will be notified. After successful connection you can launch your application.\n\n```csharp\nusing GoogleCast;\n//...\npublic class DeviceManagerDelegate : NSObject, IGCKDeviceManagerDelegate\n{\n\t[Export (\"deviceManagerDidConnect:\")]\n\tpublic void DidConnect (GoogleCast.GCKDeviceManager deviceManager)\n\t{\n\t\tConsole.WriteLine (\"connected!!\");\n\t\tDeviceManager.LaunchApplication (\"APP_ID_HERE\");\n\t}\n\t\t\n\t[Export (\"deviceManager:didConnectToCastApplication:sessionID:launchedApplication:\")]\n\tpublic void DidConnectToCastApplication (GoogleCast.GCKDeviceManager deviceManager, GoogleCast.GCKApplicationMetadata applicationMetadata, string sessionId, bool launchedApplication)\n\t{\n\t\tConsole.WriteLine (\"Application has launched\");\n\t\tvar mediaControlChannel = new GCKMediaControlChannel ();\n\t\tmediaControlChannel.Delegate = new GCKMediaControlChannelDelegate ();\n\t\tdeviceManager.AddChannel (mediaControlChannel);\n\t}\n}\n```\n\n**Media channels**\n\nMedia channels provide the means by which your sender app controls the playback on the receiver. You can also define a custom channels to send custom messages to the receiver.\n\n**Media control channel**\n\nThe media control channel plays, pauses, seeks, and stops the media on a receiver application. The media channel has a well-known namespace of `urn:x-cast:com.google.cast.media.`\n\nTo use a media channel you must create an instance of `GCKMediaControlChannel` after you connect to the cast application as shown in the `DeviceManagerDelegate` above.\n\nNext, you must define the media you would like to cast by using the `GCKMediaMetadata` class. \n\n**Media metadata**\n\nDefine the media you would like to cast by using the `GCKMediaMetadata` class.\n\n```csharp\n// Define Media metadata\nvar metadata = new GCKMediaMetadata ();\nmetadata.SetString (\"The Cat\", GCKMetadataKey.Title);\nmetadata.SetString (\"soft kitty, warm kitty, little ball of fur sleepy kitty, happy kitty, purr, purr, purr.\", GCKMetadataKey.Subtitle);\nmetadata.AddImage (new GCKImage (new NSUrl (\"http://placekitten.com/480/360\"), 480, 360));\n```\n\nFinally you are ready to cast the media. You must create a GCKMediaInformation that can be used to cast the media on the media control channel.\n\n**Load media**\n\nTo load the media, do the following.\n\n```csharp\n// define Media information\nvar mediaInformation = new GCKMediaInformation (\"http://dummyurl.com/kitten.mp4\",\n\t                       GCKMediaStreamType.None, \"video/mp4\", metadata, 0, null);\n// cast video\nMediaControlChannel.LoadMedia (mediaInformation, true, 0);\n```\n\n## External Links\n\niOS Api: [https://developers.google.com/cast/docs/reference/ios/](https://developers.google.com/cast/docs/reference/ios/)\n\n##### Portions of this page are modifications based on [work](https://developers.google.com/cast/docs/ios_sender) created and shared by [Google Inc.](http://google.com) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/).\n\t","Hash":"4ee928758c26fd7127738aa01da0de18","TargetPlatforms":["ios"],"TrialHash":null}